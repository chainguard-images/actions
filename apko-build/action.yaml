# Copyright 2022 The Distroless Authors
# SPDX-License-Identifier: Apache-2.0

name: 'Build image with apko'
description: |
  This action build an OCI image with apko, given a config file
  and tag to use and output a tar file and does not push to a registry.

inputs:
  apko-image:
    description: |
      The digest of the apko image to invoke.
    default: ghcr.io/wolfi-dev/apko:latest
    required: true

  config:
    description: |
      The config file to use for building the image.
    default: .apko.yaml
    required: false

  keyring-append:
    description: |
      The value to pass to --keyring-append.
    default: ''

  repository-append:
    description: |
      The value to pass to --repository-append.
    default: ''

  archs:
    description: |
      The architectures to build for.
    default: ''

  build-options:
    description: |
      Build options to enable (comma-separated).
    default: ''

  source-date-epoch:
    description: |
      The UNIX timestamp to use as the source date when building an image.
      This is set as the SOURCE_DATE_EPOCH environment variable.
    default: ''

  tag:
    description: |
      The tag to use for building the image.
    required: true

  use-docker-mediatypes:
    description: |
      Use Docker mediatypes for building the image.
    type: boolean
    required: false

  vcs-url:
    description: |
      Whether to detect and embed the VCS URL (unlike apko we default this to false for reproducible builds).
    type: boolean
    required: false
    default: false

  debug:
    description: |
      Enable debug logging.
    type: boolean
    required: false
    default: false

  automount-src:
    description: |
      If this directory is found, create a copy at automount-dest (inside container)
    default: ${{ github.workspace }}/.apko-automount

  automount-dest:
    description: |
      If automount-src is found, create a copy at this location (inside container)
    default: /work

runs:
  using: composite
  steps:
  - shell: bash
    run: |
      APKO_IMAGE="${{ inputs.apko-image }}"
      if [[ "${APKO_IMAGE}" == "" ]]; then
        echo "Warning: using latest wolfi-dev/apko image since apko-image input was empty string."
        APKO_IMAGE="ghcr.io/wolfi-dev/apko:latest"
      fi
      docker run -i --rm --entrypoint /bin/sh \
        -v $PWD:/github/workspace \
        --workdir /github/workspace \
        "${APKO_IMAGE}" \
        -c "$(cat <<"EOF"
      set -o errexit
      if [ -d "${{ inputs.automount-src }}" ]; then
        echo "Creating copy of ${{ inputs.automount-src }} at ${{ inputs.automount-dest }}"
        cp -r "${{ inputs.automount-src }}" "${{ inputs.automount-dest }}"
      fi
      [ -n "${{ inputs.source-date-epoch }}" ] && export SOURCE_DATE_EPOCH='${{ inputs.source-date-epoch }}'
      [ -n "${{ inputs.keyring-append }}" ] && keys="-k ${{ inputs.keyring-append }}"
      [ -n "${{ inputs.repository-append }}" ] && repos="-r ${{ inputs.repository-append }}"
      [ -n "${{ inputs.archs }}" ] && archs="--arch ${{ inputs.archs }}"
      build_options=""
      if [ -n "${{ inputs.build-options }}" ]; then
        opts="${{ inputs.build-options }}"
        for opt in ${opts//,/ }; do
          build_options="${build_options} --build-option ${opt}"
        done
      fi
      /usr/bin/apko build \
        --vcs=${{ inputs.vcs-url }} \
        ${{ inputs.use-docker-mediatypes && '--use-docker-mediatypes' }} \
        ${{ inputs.debug && '--debug' }} \
        ${{ inputs.config }} ${{ inputs.tag }} output.tar $keys $repos $archs $build_options
      echo EXIT CODE: $?
      EOF
      )"
