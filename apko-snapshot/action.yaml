# Copyright 2022 The Distroless Authors
# SPDX-License-Identifier: Apache-2.0

name: 'Build image snapshot with apko'
description: |
  This action builds an OCI image with apko, given a config file
  and base tag to use.

inputs:
  config:
    description: |
      The config file to use for building the image.
    default: .apko.yaml

  base-tag:
    description: |
      The container repository into which we should publish images.
    default: ghcr.io/${{ github.repository }}
    required: true

  target-tag:
    description: |
      The tag this build will produce upon success.  It will also be used
      to form a date-based variant for tracking over time.
    default: latest
    required: true

  username:
    description: |
      The username to use for docker login step.
    default: ${{ github.repository_owner }}

  token:
    description: |
      The token to use for docker login step.
    default: ${{ github.token }}

  trivy-exit-code:
    description: |
      The exit code for Trivy to use when vulnerabilities are encountered.
    default: "1"

outputs:
  digest:
    value: ${{ steps.apko.outputs.digest }}
    description: |
      The digest of the published container image.

runs:
  using: composite
  steps:
    - name: Setup cosign
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: v1.5.2

    - uses: imjasonh/setup-crane@v0.1

    - name: Setup QEMU
      uses: docker/setup-qemu-action@v1.2.0

    - name: Generate snapshot date
      id: snapshot-date
      run: |
        echo ::set-output name=date::$(date -u +%Y%m%d)
        echo ::set-output name=epoch::$(date -u +%s)
      shell: bash

    # Only publish the versioned tag to start.  After we have signed and
    # attested things, then we use crane to update :latest below.
    - uses: chainguard-dev/actions/apko-build@main
      id: apko
      with:
        config: ${{ inputs.config }}
        tag: ${{ inputs.base-tag }}:${{ inputs.target-tag }}-${{ steps.snapshot-date.outputs.date }}
        source-date-epoch: ${{ steps.snapshot-date.outputs.epoch }}

    - uses: docker/login-action@bb984efc561711aaa26e433c32c3521176eae55b # v1.13.0
      with:
        registry: ghcr.io
        username: ${{ inputs.username }}
        password: ${{ inputs.token }}

    - shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        cosign sign ${{ steps.apko.outputs.digest }} \
            -a sha=${{ github.sha }} \
            -a run_id=${{ github.run_id }} \
            -a run_attempt=${{ github.run_attempt }}

    - id: scan-start
      run: |
        echo ::set-output name=date::$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")
      shell: bash

    - uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.apko.outputs.digest }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: ${{ inputs.trivy-exit-code }}
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'

    # TODO(mattmoor): Figure out how to get the SARIF
    # results uploading. This may need `content: write`
    # permissions to publish the results...
    # - uses: github/codeql-action/upload-sarif@v1
    #   if: ${{ always() }}
    #   with:
    #     sarif_file: 'trivy-results.sarif'

    - shell: bash
      if: ${{ always() }}
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        ATTESTATION=$(mktemp)

        export SCANNER_URI=$(cat trivy-results.sarif | jq .runs[0].tool.driver.informationUri)
        export SCANNER_VERSION=$(cat trivy-results.sarif | jq .runs[0].tool.driver.version)

        cat > "${ATTESTATION}" <<EOF
        {
            "invocation": {
              "parameters": null,
              "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "event_id": "${{ github.event.id }}",
              "builder.id": "${{ github.workflow }}"
            },
            "scanner": {
              "uri": ${SCANNER_URI},
              "version": ${SCANNER_VERSION},
              "result": $(cat trivy-results.sarif | jq .)
            },
            "metadata": {
              "scanStartedOn": "${{ steps.scan-start.outputs.date }}",
              "scanFinishedOn": "$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")"
            }
        }
        EOF

        cosign attest ${{ steps.apko.outputs.digest }} \
            --type vuln --predicate "${ATTESTATION}"

    # TODO(#7): Replace trivy-exit-code with a Cue policy that
    # we should run against the vuln result.

    # Now that everything else has completed successfully, update the target tag.
    # based on the digest produced above.
    - shell: bash
      run: |
        crane cp ${{ steps.apko.outputs.digest }} ${{ inputs.base-tag }}:${{ inputs.target-tag }}
