# Copyright 2022 The Distroless Authors
# SPDX-License-Identifier: Apache-2.0

name: 'Build image snapshot with apko'
description: |
  This action builds an OCI image with apko, given a config file
  and base tag to use.

inputs:
  config:
    description: |
      The config file to use for building the image.
    required: true
    default: .apko.yaml

  base-tag:
    description: |
      The container repository into which we should publish images.
    default: ghcr.io/${{ github.repository }}
    required: true

  target-tag:
    description: |
      The tag this build will produce upon success.  It will also be used
      to form a date-based variant for tracking over time.
    default: latest
    required: true

  registry:
    description: |
      Which registry to use.
    default: ghcr.io
    required: true

  username:
    description: |
      The username to use for docker login step.
    required: true
    default: ${{ github.repository_owner }}

  token:
    description: |
      The token to use for docker login step.
    required: true
    default: ${{ github.token }}

  use-docker-mediatypes:
    description: |
      Use Docker mediatypes for building the image.
    required: false

  keyring-append:
    description: |
      The value to pass to --keyring-append.
    required: false
    default: ''

  archs:
    description: |
      The architectures to build for.
    required: false
    default: ''

  additional-tags:
    description: |
      Additional tags for the final image.
    required: false
    default: ''

  debug:
    description: |
      Enable debug logging.
    required: false
    default: 'false'

  image_refs:
    description: |
      (DEPRECATED) The value to pass to --image-refs.
    default: /tmp/apko.images
  
  automount-src:
    description: |
      In subsequent steps, if this directory is found, create a copy at automount-dest (inside container)
    default: ${{ github.workspace }}/.apko-automount

  automount-dest:
    description: |
      In subsequent steps, if automount-src is found, create a copy at this location (inside container)
    default: /work

outputs:
  digest:
    value: ${{ steps.apko.outputs.digest }}
    description: |
      The digest of the published container image.
  image-refs:
    value: ${{ steps.apko.outputs.image-refs }}
    description: |
      All the image and index refs by digest that were built, newline delimited.

runs:
  using: composite
  steps:
    - name: Setup cosign
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: v1.9.0

    - uses: imjasonh/setup-crane@v0.1

    - name: Setup QEMU
      uses: docker/setup-qemu-action@v1.2.0

    - name: Generate snapshot date
      id: snapshot-date
      run: |
        echo ::set-output name=date::$(date -u +%Y%m%d)
        echo ::set-output name=epoch::$(date -u +%s)
      shell: bash

    # Only publish the versioned tag to start.  After we have signed and
    # attested things, then we use crane to update :latest below.
    - uses: distroless/actions/apko-publish@main
      id: apko
      with:
        config: ${{ inputs.config }}
        tag: ${{ inputs.base-tag }}:${{ inputs.target-tag }}-${{ steps.snapshot-date.outputs.date }}
        images_refs: ${{ inputs.image_refs }}
        source-date-epoch: ${{ steps.snapshot-date.outputs.epoch }}
        use-docker-mediatypes: ${{ inputs.use-docker-mediatypes }}
        keyring-append: ${{ inputs.keyring-append }}
        archs: ${{ inputs.archs }}
        debug: ${{ inputs.debug }}
        automount-src: ${{ inputs.automount-src }}
        automount-dest: ${{ inputs.automount-dest }}

    - uses: docker/login-action@bb984efc561711aaa26e433c32c3521176eae55b # v1.13.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.token }}

    - shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        imgs=echo "${{ steps.apko.outputs.image-refs }}" | jq -r '.[]'
        if [[ ! -z ${{ inputs.image_refs }} ]]; then
          imgs=$(cat ${{ inputs.image_refs }})
        fi
        echo signing $imgs

        cosign sign $imgs \
            -a sha=${{ github.sha }} \
            -a run_id=${{ github.run_id }} \
            -a run_attempt=${{ github.run_attempt }}

    # Now that everything else has completed successfully, update the target tag.
    # based on the digest produced above.
    - shell: bash
      run: |
        crane cp ${{ steps.apko.outputs.digest }} ${{ inputs.base-tag }}:${{ inputs.target-tag }}

        for tag in $(echo ${{ inputs.additional-tags }} | sed "s/,/ /g")
        do
          crane cp ${{ steps.apko.outputs.digest }} ${{ inputs.base-tag }}:$tag
        done
