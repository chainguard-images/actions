# Copyright 2022 The Distroless Authors
# SPDX-License-Identifier: Apache-2.0

name: 'Build image with apko'
description: |
  This action build an OCI image with apko, given a config file
  and tag to use.

inputs:
  config:
    description: |
      The config file to use for building the image.
    default: .apko.yaml

  tag:
    description: |
      The tag to use for publishing the image.
    required: true

  repository_owner:
    description: |
      The repository owner's GitHub username.
    default: ${{ github.repository_owner }}

  token:
    description: |
      The repository owner's GitHub token.
    default: ${{ github.token }}

  image_refs:
    description: |
      (DEPRECATED) The value to pass to --image-refs.
    default: /tmp/apko.images

  keyring-append:
    description: |
      The value to pass to --keyring-append.
    default: ''

  archs:
    description: |
      The architectures to build for.
    default: ''

  source-date-epoch:
    description: |
      The UNIX timestamp to use as the source date when building an image.
      This is set as the SOURCE_DATE_EPOCH environment variable.
    default: ''

  use-docker-mediatypes:
    description: |
      Use Docker mediatypes for building the image.
    type: boolean
    required: false

  debug:
    description: |
      Enable debug logging.
    type: boolean
    required: false
    default: false

  automount-src:
    description: |
      If this directory is found, create a copy at automount-dest (inside container)
    default: ${{ github.workspace }}/.apko-automount

  automount-dest:
    description: |
      If automount-src is found, create a copy at this location (inside container)
    default: /work

outputs:
  digest:
    description: |
      The digest of the published container image.
  image-refs:
    description: |
      All the image and index refs by digest that were built, as a JSON array.

runs:
  using: docker
  image: "docker://ghcr.io/chainguard-dev/apko:canary"
  env:
    # Set up go-containerregistry's GitHub keychain.
    GITHUB_ACTOR: ${{ inputs.repository_owner }}
    GITHUB_TOKEN: ${{ inputs.token }}
  entrypoint: /bin/sh
  args:
    - '-c'
    - |
      set -o errexit
      set -o pipefail
      if [ -d "${{ inputs.automount-src }}" ]; then
        echo "Creating copy of ${{ inputs.automount-src }} at ${{ inputs.automount-dest }}"
        cp -r "${{ inputs.automount-src }}" "${{ inputs.automount-dest }}"
      fi
      [ -n "${{ inputs.source-date-epoch }}" ] && export SOURCE_DATE_EPOCH='${{ inputs.source-date-epoch }}'
      [ -n "${{ inputs.keyring-append }}" ] && keys="-k ${{ inputs.keyring-append }}"
      [ -n "${{ inputs.archs }}" ] && archs="--arch ${{ inputs.archs }}"
      export DIGEST_FILE=$(mktemp)
      /ko-app/apko publish \
        ${{ inputs.use-docker-mediatypes && '--use-docker-mediatypes' }} \
        ${{ inputs.debug && '--debug' }} \
        --image-refs="${{ inputs.image_refs }}" ${{ inputs.config }} ${{ inputs.tag }} $keys $archs | tee ${DIGEST_FILE}
      echo EXIT CODE: $?
      echo ::set-output name=digest::$(cat ${DIGEST_FILE})
      IMAGE_REFS=$(cat /tmp/apko.images | sed 's/$/\n/g' | grep -v '^$' | jq -R -s -c 'split("\n")[:-1]')
      echo $IMAGE_REFS
      echo ::set-output name=image-refs::$IMAGE_REFS
