# Copyright 2022 The Distroless Authors
# SPDX-License-Identifier: Apache-2.0

name: 'Build image with apko'
description: |
  This action build an OCI image with apko, given a config file
  and tag to use.

inputs:
  apko-image:
    description: |
      The digest of the apko image to invoke.
    default: ghcr.io/wolfi-dev/apko:latest
    required: true

  config:
    description: |
      The config file to use for building the image.
    default: .apko.yaml

  tag:
    description: |
      The tag to use for publishing the image.
    required: true

  repository_owner:
    description: |
      The repository owner's GitHub username.
    default: ${{ github.repository_owner }}

  repository:
    default: ${{ github.repository }}

  token:
    description: |
      The repository owner's GitHub token.
    default: ${{ github.token }}

  image_refs:
    description: |
      The value to pass to --image-refs.
    default: /tmp/apko.images

  stage_tags:
    description: |
      The value to pass to --stage-tags.
    default: ''

  keyring-append:
    description: |
      The value to pass to --keyring-append.
    default: ''

  repository-append:
    description: |
      The value to pass to --repository-append.
    default: ''

  archs:
    description: |
      The architectures to build for.
    default: ''

  build-options:
    description: |
      Build options to enable (comma-separated).
    default: ''

  source-date-epoch:
    description: |
      The UNIX timestamp to use as the source date when building an image.
      This is set as the SOURCE_DATE_EPOCH environment variable.
    default: ''

  use-docker-mediatypes:
    description: |
      Use Docker mediatypes for building the image.
    type: boolean
    required: false

  vcs-url:
    description: |
      Whether to detect and embed the VCS URL (unlike apko we default this to false for reproducible builds).
    type: boolean
    required: false
    default: false

  debug:
    description: |
      Enable debug logging.
    type: boolean
    required: false
    default: false

  automount-src:
    description: |
      If this directory is found, create a copy at automount-dest (inside container)
    default: ${{ github.workspace }}/.apko-automount

  automount-dest:
    description: |
      If automount-src is found, create a copy at this location (inside container)
    default: /work

  package-version-tag:
    description: |
      apko can tag the final image with the version of the corresponding apk package passed in here.
    required: false
    default: ''

  package-version-tag-stem:
    description: |
      stem version tags.
    type: boolean
    required: false
    default: false

  package-version-tag-prefix:
    description: |
      prefix for version tag(s).
    required: false
    default: ''

  tag-suffix:
    description: |
      Suffix to use with the package-version-tag feature, if any.
    required: false
    default: ''

  sbom-path:
    description: |
      Path to write the SBOMs.
    required: false
    default: ''

  generic-user:
    description: |
      Username to login to registry.
    required: false
    default: ''

  generic-pass:
    description: |
      Password to login to registry.
    required: false
    default: ''

outputs:
  digest:
    value: ${{ steps.docker-run.outputs.digest }}
    description: |
      The digest of the published container image.

runs:
  using: composite
  steps:
  - id: docker-run
    shell: bash
    run: |
      APKO_IMAGE="${{ inputs.apko-image }}"
      if [[ "${APKO_IMAGE}" == "" ]]; then
        echo "Warning: using latest wolfi-dev/apko image since apko-image input was empty string."
        APKO_IMAGE="ghcr.io/wolfi-dev/apko:latest"
      fi
      docker run -i --rm --entrypoint /bin/sh \
        --network host \
        -v $PWD:/github/workspace \
        -v /tmp:/tmp \
        --workdir /github/workspace \
        -e "GITHUB_ACTOR=${{ inputs.repository_owner }}" \
        -e "GITHUB_TOKEN=${{ inputs.token }}" \
        -e "REPOSITORY=${{ inputs.repository }}" \
        "${APKO_IMAGE}" \
        -c "$(cat <<"EOF"
      set -o errexit
      set -o pipefail

      if [[ "${{ inputs.generic-user }}" != "" && "${{ inputs.generic-pass }}" != "" ]]; then
        echo "${{ inputs.generic-pass }}" | \
          /usr/bin/apko login -u "${{ inputs.generic-user }}" \
            --password-stdin "$(echo "${{ inputs.tag }}" | cut -d'/' -f1)"
      fi

      if [ -d "${{ inputs.automount-src }}" ]; then
        echo "Creating copy of ${{ inputs.automount-src }} at ${{ inputs.automount-dest }}"
        cp -r "${{ inputs.automount-src }}" "${{ inputs.automount-dest }}"
      fi
      [ -n "${{ inputs.source-date-epoch }}" ] && export SOURCE_DATE_EPOCH='${{ inputs.source-date-epoch }}'
      [ -n "${{ inputs.keyring-append }}" ] && keys="-k ${{ inputs.keyring-append }}"
      [ -n "${{ inputs.repository-append }}" ] && repos="-r ${{ inputs.repository-append }}"
      [ -n  "${{ inputs.archs }}" ] && archs="--arch ${{ inputs.archs }}"
      build_options=""
      if [ -n "${{ inputs.build-options }}" ]; then
        opts="${{ inputs.build-options }}"
        for opt in ${opts//,/ }; do
          build_options="${build_options} --build-option ${opt}"
        done
      fi

      packageVersionTag="--package-version-tag=${{ inputs.package-version-tag }}"
      if [ "${{ inputs.package-version-tag }}" == "" ]; then
        repo=$(echo $REPOSITORY | cut -d'/' -f2)
        packageVersionTag="--package-version-tag=$repo"
      fi
      packageVersionTagPrefix="--package-version-tag-prefix=${{ inputs.package-version-tag-prefix }}"

      tagSuffix="--tag-suffix=${{ inputs.tag-suffix }}"
      sbomPath="--sbom-path=${{ inputs.sbom-path }}"

      export DIGEST_FILE=$(mktemp)
      /usr/bin/apko publish \
        --vcs=${{ inputs.vcs-url }} \
        ${{ inputs.use-docker-mediatypes && '--use-docker-mediatypes' }} \
        ${{ inputs.package-version-tag-stem && '--package-version-tag-stem' }} \
        '--debug' \
        --image-refs="${{ inputs.image_refs }}" --stage-tags="${{ inputs.stage_tags }}" ${{ inputs.config }} ${{ inputs.tag }} $keys $repos $archs $build_options $packageVersionTag $packageVersionTagPrefix $tagSuffix $sbomPath | tee ${DIGEST_FILE}
      echo EXIT CODE: $?
      echo ::set-output name=digest::$(cat ${DIGEST_FILE})
      EOF
      )"
