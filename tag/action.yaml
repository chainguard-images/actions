# Copyright 2022 The Distroless Authors
# SPDX-License-Identifier: Apache-2.0

name: 'Add additonal tags to image'
description: |
  This action discovers additional tags for the distroless image
  and adds them to the image.

inputs:
  distroless_image:
    description: |
      The distroless image to add tags to
    required: true
    default: ''

  docker_image:
    description: |
      The docker image to compare the distroless image against.
    default: ''
    required: true

  docker_image_tag:
    description: |
      Tag for the docker image.
    default: ''
    required: true

outputs:
  trimmed_tag:
    description: |
      The trimmed package version tag to compare Dockerhub tags against

runs:
  using: composite
  steps:
    - uses: imjasonh/setup-crane@v0.2
    - name: Trim alpine version tag
      id: trim
      if: ${{ inputs.docker_image_tag }} == ""
      shell: bash
      run: |
        # For images tagged with alpine package version, we want to trim the `-rx` off the tag and retag
        TAGS=$(crane ls ${{ inputs.distroless_image }} || true)
        if [[ $TAGS == "" ]]; then
          echo "Error getting tags, exiting"
          exit 0
        fi

        LATEST_DIGEST=$(crane digest ${{ inputs.distroless_image }}:latest)
        ALPINE_TAG_REGEX="^.*-r[0-9]{1}$"

        for tag in $TAGS
        do
            if [[ ! $tag =~ $ALPINE_TAG_REGEX ]]; then
                continue
            fi
            echo "Looking at $tag"

            newTag=$(echo $tag | cut -d'-' -f1)

            NEW_TAG_DIGEST=$(crane digest ${{ inputs.distroless_image }}:$tag)
            if [[ ! $NEW_TAG_DIGEST == $LATEST_DIGEST ]]; then
                echo "${{ inputs.distroless_image }}:$tag is not the latest image, skipping"
                continue
            fi

            # Otherwise, tag the image with the new tag
            crane tag ${{ inputs.distroless_image }}:$tag $newTag

            echo "Setting trimmed_tag output to $newTag"
            echo "::set-output name=trimmed_tag::$newTag"
            break
        done

    - name: Get additional tags and retag
      shell: bash
      run: |
        TAGS=$(crane ls ${{ inputs.docker_image }})
        TAGGED_IMAGES=""

        DOCKER_IMAGE_TAG=${{ inputs.docker_image_tag }}
        if [[ $DOCKER_IMAGE_TAG == "" ]]; then
            DOCKER_IMAGE_TAG=${{ steps.trim.outputs.trimmed_tag }}
        fi

        DOCKER_DIGEST=$(crane digest ${{ inputs.docker_image }}:$DOCKER_IMAGE_TAG || true)
        if [[ $DOCKER_DIGEST == "" ]]; then
            echo "${{ inputs.docker_image }}:$DOCKER_IMAGE_TAG doesn't exist, skipping retagging"
            exit 0
        fi

        for tag in $TAGS
        do
            digest=$(crane digest ${{ inputs.docker_image }}:$tag)
            if [[ "$digest" = "$DOCKER_DIGEST"  ]]; then
                echo "Tag distroless image with $tag"
                crane tag ${{ inputs.distroless_image }} $tag
                TAGGED_IMAGES=$TAGGED_IMAGES,$tag
            else
                echo "Skipping $tag"
            fi
        done

        echo "Added these additional tags: $TAGGED_IMAGES"
