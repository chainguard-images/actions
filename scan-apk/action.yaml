# Copyright 2022 The Distroless Authors
# SPDX-License-Identifier: Apache-2.0

name: 'Scan APK for vulnerabilities'
description: |
  This action scans an APK for vulnerabilities by turning it into an OCI image first.

inputs:

  repositories:
    description: |
      A comma-delimited list of APK repositories to include.
    required: false
    default: https://packages.wolfi.dev/os

  keyring:
    description: |
      A comma-delimited list of APK keyrings to include.
    required: false
    default: https://packages.wolfi.dev/os/wolfi-signing.rsa.pub

  package:
    description: |
      The APK to scan for vulnerabilities.
    required: true

  architecture:
    description: |
      The architecture to scan the package for vulnerabilities.
    required: false
    default: "x86_64"

outputs:
  vuln-count:
    description: Number of vulnerables in Grype scan
    value: ${{ steps.scan-report.outputs.vuln-count }}

runs:
  using: composite
  steps:
    - uses: chainguard-dev/actions/setup-registry@1b32103f5aa389c31ab0be75a8edc38d7e4750d8 # v1.5.7
      with:
        port: 1234

    - shell: bash
      id: mkconfig
      run: |
        TMP="$GITHUB_WORKSPACE/config_file"

        cat > "${TMP}" <<EOF
        contents:
          repositories: $(echo "${{ inputs.repositories }}" | tr -d '[:space:]' | jq --raw-input -c --slurp 'split(",")')
          keyring: $(echo "${{ inputs.keyring }}" | tr -d '[:space:]' | jq --raw-input -c --slurp 'split(",")')
          packages:
          - ${{ inputs.package }}

        archs:
        - ${{ inputs.architecture }}
        EOF

        echo "CONFIG_FILE=${TMP}" >> $GITHUB_ENV

    - shell: bash
      run: |
        cat ${{ env.CONFIG_FILE }}

    - uses: ./apko-publish
      with:
        config: ${{ env.CONFIG_FILE }}
        tag: localhost:1234/apk-scan

    - id: grype-scan
      uses: anchore/scan-action@f6601287cdb1efc985d6b765bbf99cb4c0ac29d8 # v7.0.0
      with:
        image: localhost:1234/apk-scan
        fail-build: false
        severity-cutoff: low

    - id: scan-report
      shell: bash
      run: |
        echo "vuln-count=$(cat ${{ steps.grype-scan.outputs.sarif }} | jq '.runs[0].results | length')" >> $GITHUB_OUTPUT
